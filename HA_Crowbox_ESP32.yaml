esphome:
  name: crowbox_esp32
  platform: ESP32
  board: esp-wrover-kit

wifi:
  ssid: "WIFI"
  password: "WIFIPASSWORD"
  manual_ip:
    static_ip: 192.168.1.157
    gateway: 192.168.1.1
    subnet: 255.255.255.0
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Crowbox Hotspot"
    password: "uiJ7qr80btu1"

captive_portal:

##UNCOMMENT THE CSS_INCLUDE AND JS_INCLUDE TO COPY THE FILES TO THE ESP32 FOR THE WEBSERVER. THIS IS ONLY
##NECESSARY IF YOU ARE USING THE WEB SERVER AND THE ESP32 WILL **NOT** HAVE ACCESS TO THE INTERNET.
web_server:
  port: 80
  auth:
    username: admin
    password: crowbox
#  css_include: '/config/esphome/crowbox/web/webserver-v1.min.css'
#  js_include: '/config/esphome/crowbox/web/webserver-v1.min.js'

logger:  

# Enable Home Assistant API
api:
  reboot_timeout: 15min
ota:

globals:
  - id: num_executions
    type: int
    restore_value: yes
    initial_value: '0'

 # THIS SCRIPT CONTROLS THE SERVER CLOSING THE FEEDER DOOR. IT WILL CLOSE 20%, PAUSE, CLOSE ANOTHER 20%, PAUSE, AND REPEAT UNTIL THE DOOR IS COMPLETELY CLOSED.
script:
  - id: servo_close
    then:
      - servo.write:
          id: platform_servo
          level: 80.0%
      - delay: 2s
      - servo.write:
          id: platform_servo
          level: 60.0%
      - delay: 2s
      - servo.write:
          id: platform_servo
          level: 40.0%
      - delay: 2s
      - servo.write:
          id: platform_servo
          level: 20.0%
      - delay: 2s
      - servo.write:
          id: platform_servo
          level: 0.0%
      - delay: 2s
      - servo.write:
          id: platform_servo
          level: -20.0%
      - delay: 2s
      - servo.write:
          id: platform_servo
          level: -40.0%
      - delay: 2s
      - servo.write:
          id: platform_servo
          level: -60.0%
      - delay: 2s
      - servo.write:
          id: platform_servo
          level: -80%
      - delay: 2s
      - servo.write:
          id: platform_servo
          level: -100.0%

text_sensor:
  - platform: template
    name: Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start
sensor:
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();
  - platform: template
    id: coin_count
    name: "Coins collected"
    accuracy_decimals: 0
    update_interval: 30s
    lambda: return id(num_executions);

binary_sensor:
# Platform sensor
  - platform: gpio
    pin:  
      number: GPIO13
      mode: INPUT_PULLUP
      inverted: true
    name: "Platform sensor"
    device_class: occupancy
    id: platform_sensor
    on_press:  
      then:
        - if:
            condition:
              - switch.is_on: p2
            then:
            - servo.write:
                id: platform_servo
                level: 100.0%
            - delay: 15s
            - script.execute:
                id:  servo_close
            - lambda: |-
                id(num_executions) += 1;

# Coin switch
  - platform: gpio
    pin:
      number: GPIO12
      mode: INPUT_PULLUP
      inverted: true
    name: "Coin sensor"
    id: coin_sensor
    on_press:
      then:
        - if:
            condition:
              and:
                - switch.is_on: p3
                - binary_sensor.is_on: platform_sensor
                - binary_sensor.is_on: coin_sensor
            then:
            - servo.write:
                id: platform_servo
                level: 100.0%
            - delay: 15s
            - script.execute:
                id: servo_close
            
            - lambda: |-
                id(num_executions) += 1;
# Platform servo config    
servo:
  - id: platform_servo
    #auto_detach_time: 10s
    restore: true
    #transition_length: 2s
    output: pwm_output

# D5
output:
  - platform: ledc
    id: pwm_output
    pin: GPIO26
    frequency: 50 Hz


switch:
  - platform: restart
    name: "Crowbox Restart"
#Switch 1 ON, 2 and 3 OFF
  - platform: template
    name: "Program One"
    id: p1
    icon: mdi:numeric-1-box-outline
    restore_state: true
    turn_on_action:
      - servo.write:
          id: platform_servo
          level: 100%
      - switch.template.publish:
          id: p1
          state: ON
      - switch.turn_off: p2
      - switch.template.publish:
          id: p2
          state: OFF
      - switch.turn_off: p3
      - switch.template.publish:
          id: p3
          state: OFF
    turn_off_action:
      - switch.template.publish:
          id: p1
          state: OFF
      - servo.write:
          id: platform_servo
          level: -100.0%

#Switch 2 ON, 1 and 3 OFF
  - platform: template
    name: "Program Two"
    id: p2
    icon: mdi:numeric-2-box-outline
    restore_state: true
    turn_on_action:
      - switch.template.publish:
          id: p2
          state: ON
      - switch.turn_off: p1
      - switch.template.publish:
          id: p1
          state: OFF
      - switch.turn_off: p3
      - switch.template.publish:
          id: p3
          state: OFF
    turn_off_action:
      - switch.template.publish:
          id: p2
          state: OFF
#Switch 3 ON, 1 and 2 OFF
  - platform: template
    name: "Program Three"
    id: p3
    icon: mdi:numeric-3-box-outline
    restore_state: true
    turn_on_action:
      - switch.template.publish:
          id: p3
          state: ON
      - switch.turn_off: p1
      - switch.template.publish:
          id: p1
          state: OFF
      - switch.turn_off: p2
      - switch.template.publish:
          id: p2
          state: OFF
    turn_off_action:
      - switch.template.publish:
          id: p3
          state: OFF
## COIN RESET SWITCH
  - platform: template
    name: "Coin Reset"
    id: CR
    turn_on_action:
      - lambda: |-
                id(num_executions) = 0;